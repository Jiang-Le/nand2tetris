// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    ARegister(in=nextAValue, load=saveToA, out=A, out[0..14]=addressM); // A寄存器
    
    // if (instruction[12]==0) 操作数为A else 操作数为RAM[A]
    Mux16(a=A, b=inM, sel=instruction[12], out=OpV1);

    DRegister(in=nextDValue, load=saveToD, out=D); // D寄存器
    
    ALU(x=D, y=OpV1, 
        zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6],
        out=nextDValue, out=calOut, out=outM, zr=zr, ng=ng);

    // if (instruction[15]==0) { A = instruction }
    Mux16(a=instruction, b=calOut, sel=instruction[15], out=nextAValue);
    Not(in=instruction[15], out=loadImmediate);

    Or(a=loadImmediate, b=instruction[5], out=saveToA);
    And(a=instruction[15], b=instruction[4], out=saveToD);
    
    Not(in=zr, out=nzr);
    Not(in=ng, out=ge);
    And(a=nzr, b=ge, out=pos); // 是否大于0

    // 当alu计算结果和指令匹配，且当前是C指令时，才setPC
    And(a=ng, b=instruction[2], out=o1);
    And(a=zr, b=instruction[1], out=o2);
    And(a=pos, b=instruction[0], out=o3);
    Or8Way(in[0]=o1, in[1]=o2, in[2]=o3, out=maySetPC);
    And(a=instruction[15], b=maySetPC, out=setPC);

    Not(in=reset, out=noReset);
    Not(in=setPC, out=noSetPC);
    Or(a=noReset, b=noSetPC, out=needInc);

    PC(in=A, load=setPC, inc=needInc, reset=reset, out[0..14]=pc);

    And(a=instruction[15], b=instruction[3], out=writeM);
}